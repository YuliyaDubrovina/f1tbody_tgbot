"""
–î–∏–∞–ª–æ–≥ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞

TODO:
- –í–Ω–µ—Å—Ç–∏ –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö/–ø–æ–ª—É—á–µ–Ω–∏–µ id –∫–ª–∏–µ–Ω—Ç–∞
- –í–Ω–µ—Å—Ç–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ pydentic –¥–ª—è —Å—É—â–Ω–æ—Å—Ç–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
"""
import re

from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from fsm_states import AddWorkoutStates

# –°–æ–∑–¥–∞–µ–º –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä
router = Router()

# TODO: –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
# def check_if_client_exists(session, client_name: str) -> bool:
#     """ –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö  """
#     —Ålient = session.query(Client).filter(Client.name == client_name).first()
#     return bool(client)

def generate_workouts_result_msg(data):
    workouts = data["workouts"]
    result = "–í—ã –¥–æ–±–∞–≤–∏–ª–∏ —Å–ª–µ–¥—É—é—â–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:\n"
    result += f"üë®üèº –ò–º—è –∫–ª–∏–µ–Ω—Ç–∞: {data["client_name"]}\n"
    result += f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: {data["workouts_count"]}\n"
    for i, workout in enumerate(workouts):
        result += f"üèÜ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ {i + 1}\n"
        result += f"–û–ø–∏—Å–∞–Ω–∏–µ: {workout["description"]}\n"
        result += f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π: {workout["exercises_count"]}\n"
        for j, exercise in enumerate(workout["exercises"]):
            result += f"üéó –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ {j + 1}:\n"
            result += f"–ù–∞–∑–≤–∞–Ω–∏–µ: {exercise["name"]}\n"
            result += f"–û–ø–∏—Å–∞–Ω–∏–µ: {exercise["description"]}\n"
            result += f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥—Ö–æ–¥–æ–≤: {exercise["repetitions"]}\n"
            result += f"–í–µ—Å: {int(exercise["weight"])} –∫–≥\n"

    return result


def is_valid_name(name: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∏–º–µ–Ω–∏ –∫–ª–∏–µ–Ω—Ç–∞
    - –°–æ—Å—Ç–æ–∏—Ç –∏–∑ –±—É–∫–≤, –ø—Ä–æ–±–µ–ª–æ–≤, –¥–µ—Ñ–∏—Å–æ–≤ (–ª–∞—Ç–∏–Ω–∏—Ü–∞ –∏ –∫–∏—Ä–∏–ª–ª–∏—Ü–∞)
    - –ù–µ –ø—É—Å—Ç–æ–µ
    - –ù–µ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤

    :param name: –ò–º—è –∫–ª–∏–µ–Ω—Ç–∞
    :return: bool
    """
    return bool(re.match(r"^[A-Za-z–ê-–Ø–∞-—è–Å—ë\s-]+$", name.strip()))


@router.message(Command("add_workouts"))
async def add_workouts(message: types.Message, state: FSMContext):
    """
    –°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    """
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –°–µ–π—á–∞—Å —è –ø–æ–º–æ–≥—É –¥–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞.\n–ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—à—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ, —Ç–æ –Ω–∞–∂–º–∏ /cancel")
    await state.set_state(AddWorkoutStates.client_name)
    await message.answer("–í–≤–µ–¥–∏ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞")
    await state.set_state(AddWorkoutStates.client_name)


@router.message(AddWorkoutStates.client_name)
async def set_client_name(message: types.Message, state: FSMContext):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –∫–ª–∏–µ–Ω—Ç–∞
    """
    client_name = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∏–º–µ–Ω–∏
    if not is_valid_name(client_name):
        await message.answer("–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞ –º–æ–∂–µ—Ç —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ –±—É–∫–≤, –ø—Ä–æ–±–µ–ª–æ–≤, –¥–µ—Ñ–∏—Å–æ–≤")
        return

    # TODO –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö

    await state.update_data(client_name=client_name)
    await message.answer("–°–∫–æ–ª—å–∫–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –¥–æ–±–∞–≤–∏—Ç—å?")
    await state.set_state(AddWorkoutStates.workouts_count)


@router.message(AddWorkoutStates.workouts_count)
async def set_workouts_count(message: types.Message, state: FSMContext):
    """
    –í–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
    """
    if not message.text.isdigit():
        await message.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º")
        return

    workouts_count = int(message.text)
    if workouts_count < 1:
        await message.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
        return

    await state.update_data(workouts_count=workouts_count, workouts= [])
    await message.answer("–í–≤–µ–¥–∏ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏")
    await state.set_state(AddWorkoutStates.workout_description)


@router.message(AddWorkoutStates.workout_description)
async def set_workout_description(message: types.Message, state: FSMContext):
    """
    –í–≤–æ–¥ –æ–ø–∏—Å–∞–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    """
    workout_description = message.text.strip()

    data = await state.get_data()
    workouts = data["workouts"]
    workouts.append({
        "description": workout_description,
        "exercise_count": 0,
        "exercises": []
    })
    await state.update_data(workouts=workouts)
    await message.answer("–í–≤–µ–¥–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ")
    await state.set_state(AddWorkoutStates.exercises_count)


@router.message(AddWorkoutStates.exercises_count)
async def set_exercise_count(message: types.Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º")
        return

    exercise_count = int(message.text)
    if exercise_count < 1:
        await message.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
        return

    data = await state.get_data()
    workouts = data["workouts"]
    workouts[-1]["exercises_count"] = exercise_count
    await state.update_data(workouts=workouts)
    await message.answer("–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è")
    await state.set_state(AddWorkoutStates.exercise_name)


@router.message(AddWorkoutStates.exercise_name)
async def set_exercise_name(message: types.Message, state: FSMContext):
    exercise_name = message.text.strip()
    data = await state.get_data()
    workouts = data["workouts"]
    workouts[-1]["exercises"].append({'name': exercise_name, 'description': '', 'weight': ''})

    await state.update_data(workouts=workouts)
    await message.answer("–í–≤–µ–¥–∏ –æ–ø–∏—Å–∞–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è")
    await state.set_state(AddWorkoutStates.exercise_description)


@router.message(AddWorkoutStates.exercise_description)
async def set_exercise_description(message: types.Message, state: FSMContext):
    exercise_description = message.text.strip()
    if not exercise_description:
        await message.answer("–û–ø–∏—Å–∞–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        return

    data = await state.get_data()
    workouts = data["workouts"]
    workouts[-1]["exercises"][-1]["description"] = exercise_description
    await state.update_data(workouts=workouts)
    await message.answer("–í–≤–µ–¥–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π")
    await state.set_state(AddWorkoutStates.repetitions)


@router.message(AddWorkoutStates.repetitions)
async def set_repetitions(message: types.Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º")
        return

    repetitions = int(message.text)
    if repetitions < 1:
        await message.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
        return

    data = await state.get_data()
    workouts = data["workouts"]
    workouts[-1]["exercises"][-1]["repetitions"] = repetitions
    await state.update_data(workouts=workouts)
    await message.answer("–í–≤–µ–¥–∏ –≤–µ—Å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è")
    await state.set_state(AddWorkoutStates.weight)

@router.message(AddWorkoutStates.weight)
async def set_weight(message: types.Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("–í–µ—Å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º")
        return

    weight = float(message.text)
    if weight < 0:
        await message.answer("–í–µ—Å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º")
        return

    data = await state.get_data()
    workouts = data["workouts"]
    workouts[-1]["exercises"][-1]["weight"] = weight
    workouts[-1]["exercises_count"] -= 1
    exercises_count = workouts[-1]["exercises_count"]
    await state.update_data(workouts=workouts)

    if exercises_count > 0:
        await message.answer(f"–û—Å—Ç–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π: {exercises_count}. –í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è")
        await state.set_state(AddWorkoutStates.exercise_name)
    else:
        workouts[-1]["exercises_count"] = len(workouts[-1]["exercises"])
        await state.update_data(workouts=workouts)

        current_workouts_count = await state.get_value("workouts_count") - 1
        await state.update_data(workouts_count=current_workouts_count)

        if current_workouts_count > 0:
            await message.answer(f"–û—Å—Ç–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: {current_workouts_count}. –í–≤–µ–¥–∏ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏")
            await state.set_state(AddWorkoutStates.workout_description)
        else:

            await state.update_data(workouts_count=len(workouts))
            await message.answer("–í—Å–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã")
            result_msg = generate_workouts_result_msg(await state.get_data())
            await message.answer(result_msg)
            await state.clear()


@router.message(Command("cancel"))
async def cancel_adding(message: types.Message, state: FSMContext):
    await message.answer("–û—Ç–º–µ–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫")
    await state.clear()